{"version":3,"sources":["features/actions/actionSlice.js","features/menu_item.js","features/menu_editor.js","features/restaurent_menu.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","menu","Bacon","Meat","Pork","Egg","Hamburger","Bread","Flour","Water","Cheese","Milk","Mushrooms","Sausages","reducers","addNewMenu","state","action","newMenu","payload","push","addNewIngredient","selectedMenu","newIngredient","parts","split","forEach","element","Object","values","item","index","key","keys","actions","selectMenu","restaurent","Text","text","depth","selection","Typography","variant","dangerouslySetInnerHTML","__html","replace","RegExp","match","MenuItem","useState","showDetails","show","menuHasSelection","map","includes","submenu","submenuHtml","subitem","style","border","paddingLeft","onClick","MenuEditor","flattenedMenu","useSelector","flatMap","flattenMenu","menus","length","sub","setNewMenu","setSelectedMenu","setNewIngredient","dispatch","useDispatch","margin","FormGroup","row","padding","TextField","value","onChange","e","target","label","Button","Select","autoWidth","selected","RestaurentMenu","keyword","setKeyword","editable","toggleEditable","FormControlLabel","control","Switch","checked","App","className","configureStore","reducer","actionReducer","Boolean","window","location","hostname","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86b6bdfa.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialMenu = [\n  {\n    \"Bacon & eggs\": [\n      {\n        Bacon: [{ Meat: [{ Pork: [] }] }]\n      },\n      {\n        \"Ham Eggs\": [{ Egg: [] }]\n      }\n    ]\n  },\n  {\n    Hamburger: [\n      {\n        Meat: [{ Pork: [] }]\n      },\n      {\n        Bread: [{ Flour: [] }, { Water: [] }]\n      },\n      {\n        Cheese: [{ Milk: [] }]\n      }\n    ]\n  },\n  {\n    \"English breakfast\": [\n      {\n        \"Fried eggs\": [{ Egg: [] }]\n      },\n      {\n        Mushrooms: []\n      },\n      {\n        Sausages: [{ Meat: [{ Pork: [] }] }]\n      },\n      {\n        Bread: [{ Flour: [] }, { Water: [] }]\n      }\n    ]\n  }\n];\n\nexport const slice = createSlice({\n         name: \"restaurent\",\n         initialState: {\n           menu: initialMenu\n         },\n         reducers: {\n           addNewMenu: (state, action) => {\n             const newMenu = {};\n             newMenu[action.payload] = [];\n             state.menu.push(newMenu);\n           },\n           addNewIngredient: (state, action) => {\n             const { selectedMenu, newIngredient } = action.payload;\n\n             const newMenu = {};\n             newMenu[newIngredient] = [];\n\n             const parts = selectedMenu.split(\" -> \");\n             let menu = state.menu;\n\n             parts.forEach(element => {\n               Object.values(menu).forEach((item, index) => {\n                 const key = Object.keys(item)[0];\n                 if (key === element) {\n                   menu = Object.values(menu)[index][key];\n                 }\n               });\n             });\n\n             menu.push(newMenu);\n           }\n         }\n       });\n\nexport const { addNewMenu, addNewIngredient } = slice.actions;\n\nexport const selectMenu = state => state.restaurent.menu;\n\nexport default slice.reducer;\n","import React, { useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Text = ({ text = \"provide text\", depth = 1, selection }) => (\n  <Typography variant={\"h\" + (depth + 2)}>\n    {depth > 1 && \"â””\"}\n    {depth > 1 && selection ? (\n      <span\n        dangerouslySetInnerHTML={{\n          __html: text.replace(\n            new RegExp(selection, \"gi\"),\n            match => `<mark>${match}</mark>`\n          )\n        }}\n      />\n    ) : (\n      text\n    )}\n  </Typography>\n);\n\nconst menuHasSelection = (menu, depth, selection) => {\n  if (selection === \"\") {\n    return true;\n  }\n  const text = Object.keys(menu)[0];\n  if (depth > 1 && text.match(new RegExp(selection, \"gi\"))) {\n    return true;\n  }\n  const submenu = Object.values(menu)[0];\n  const mappings = submenu.map(item =>\n    menuHasSelection(item, depth + 1, selection)\n  );\n  return mappings.includes(true);\n};\n\nexport const MenuItem = ({ menu = {}, depth = 1, selection = \"\" }) => {\n  const [showDetails, show] = useState(false);\n  if (depth === 1 && !menuHasSelection(menu, depth, selection)) return null;\n  const text = Object.keys(menu)[0];\n  const submenu = Object.values(menu)[0];\n\n  const submenuHtml =\n    (showDetails || depth > 1) &&\n    submenu.map((subitem, index) => (\n      <MenuItem\n        key={\"sub-item-\" + index}\n        menu={subitem}\n        depth={depth + 1}\n        selection={selection}\n      />\n    ));\n  return (\n    <div\n      style={{\n        border: \"none thin gray\",\n        paddingLeft: depth * 20\n      }}\n      onClick={() => show(!showDetails)}\n    >\n      <Text text={text} depth={depth} selection={selection} />\n      {submenuHtml}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  FormGroup,\n  Typography,\n  TextField,\n  Select,\n  MenuItem,\n  Button\n} from \"@material-ui/core\";\n\nimport {\n  selectMenu,\n  addNewMenu,\n  addNewIngredient\n} from \"./actions/actionSlice\";\n\nconst flattenMenu = menu => {\n  const text = Object.keys(menu)[0];\n  const menus = [text];\n\n  const submenu = Object.values(menu)[0];\n  if (submenu.length > 0) {\n    const subs = submenu.flatMap(item => flattenMenu(item));\n    subs.forEach(sub => {\n      menus.push(text + \" -> \" + sub);\n    });\n  }\n  return menus;\n};\n\nexport const MenuEditor = () => {\n  const menu = useSelector(selectMenu);\n  const flattenedMenu = menu.flatMap(item => flattenMenu(item));\n\n  const [newMenu, setNewMenu] = useState(\"\");\n  const [selectedMenu, setSelectedMenu] = useState(flattenedMenu[0]);\n  const [newIngredient, setNewIngredient] = useState(\"\");\n  const dispatch = useDispatch();\n  return (\n    <div style={{ margin: 20 }}>\n      <Typography variant=\"h3\">Adding items or ingredients to the Menu</Typography>\n      <FormGroup row style={{ padding: 20 }}>\n        <TextField\n          variant=\"outlined\"\n          value={newMenu}\n          onChange={e => setNewMenu(e.target.value)}\n          label=\"new menu item\"\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            dispatch(addNewMenu(newMenu), setNewMenu(\"\"));\n          }}\n        >\n          Add new menu item\n        </Button>\n      </FormGroup>\n      <FormGroup row style={{ padding: 20 }}>\n        <Select\n          autoWidth\n          value={selectedMenu}\n          onChange={e => setSelectedMenu(e.target.value)}\n        >\n          {flattenedMenu.map(menu => (\n            <MenuItem key={menu} selected value={menu}>\n              {menu}\n            </MenuItem>\n          ))}\n        </Select>\n        <TextField\n          variant=\"outlined\"\n          label=\"ingridient\"\n          value={newIngredient}\n          onChange={e => setNewIngredient(e.target.value)}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            dispatch(\n              addNewIngredient({ newIngredient, selectedMenu }),\n              setNewIngredient(\"\")\n            );\n          }}\n        >\n          Add ingridient to menu item\n        </Button>\n      </FormGroup>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectMenu } from \"./actions/actionSlice\";\nimport {\n  FormControlLabel,\n  Typography,\n  TextField,\n  Switch\n} from \"@material-ui/core\";\nimport { MenuItem } from \"./menu_item\";\nimport { MenuEditor } from \"./menu_editor\";\nexport const RestaurentMenu = () => {\n  const menu = useSelector(selectMenu);\n  const [keyword, setKeyword] = useState(\"\");\n  const [editable, toggleEditable] = useState(false);\n\n  return (\n    <div>\n      <Typography variant=\"h2\">Restaurent Menu</Typography>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={editable}\n            onChange={e => toggleEditable(!editable)}\n          />\n        }\n        label=\"Editable Menu\"\n      />\n      <TextField\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)}\n        label=\"Search for allergen\"\n        variant=\"outlined\"\n      />\n      <div style={{ margin: 15, border: \"thin solid navy\" }}>\n        <div style={{ margin: 5, padding: 10, border: \"thin solid navy\" }}>\n          {menu.map((item, index) => (\n            <MenuItem\n              key={\"menu-item\" + index}\n              menu={item}\n              selection={keyword}\n            />\n          ))}\n        </div>\n      </div>\n      {editable && <MenuEditor />}\n    </div>\n  );\n};\n","import React from \"react\";\r\nimport { RestaurentMenu } from \"./features/restaurent_menu\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RestaurentMenu />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport actionReducer from \"../features/actions/actionSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    restaurent: actionReducer\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}