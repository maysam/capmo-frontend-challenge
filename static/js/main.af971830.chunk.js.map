{"version":3,"sources":["features/counter/Counter.module.css","features/counter/counterSlice.js","features/menu_item.js","features/restaurent_menu.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","slice","createSlice","name","initialState","value","menu","Bacon","Meat","Pork","Egg","Hamburger","Bread","Flour","Water","Cheese","Milk","Mushrooms","Sausages","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectMenu","counter","Text","text","depth","selection","Typography","variant","dangerouslySetInnerHTML","__html","replace","RegExp","match","MenuItem","useState","showDetails","show","menuHasSelection","Object","keys","values","map","item","includes","submenu","submenuHtml","subitem","index","key","style","border","paddingLeft","onClick","RestaurentMenu","useSelector","keyword","setKeyword","TextField","onChange","e","target","label","App","className","configureStore","reducer","counterReducer","Boolean","window","location","hostname","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af971830.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialMenu = [\r\n  {\r\n    \"Bacon & eggs\": [\r\n      {\r\n        Bacon: [{ Meat: [{ Pork: [] }] }]\r\n      },\r\n      {\r\n        \"Ham Eggs\": [{ Egg: [] }]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    Hamburger: [\r\n      {\r\n        Meat: [{ Pork: [] }]\r\n      },\r\n      {\r\n        Bread: [{ Flour: [], Water: [] }]\r\n      },\r\n      {\r\n        Cheese: [{ Milk: [] }]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"English breakfast\": [\r\n      {\r\n        \"Fried eggs\": [{ Egg: [] }]\r\n      },\r\n      {\r\n        Mushrooms: []\r\n      },\r\n      {\r\n        Sausages: [{ Meat: [{ Pork: [] }] }]\r\n      },\r\n      {\r\n        Bread: [{ Flour: [] }, { Water: [] }]\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport const slice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 12,\r\n    menu: initialMenu\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = slice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport const selectMenu = state => state.counter.menu;\r\n\r\nexport default slice.reducer;\r\n","import React, { useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Text = ({ text = \"provide text\", depth = 1, selection }) => (\n  <Typography variant={\"h\" + (depth + 2)}>\n    {depth > 1 && \"â””\"}\n    {depth > 1 && selection ? (\n      <span\n        dangerouslySetInnerHTML={{\n          __html: text.replace(\n            new RegExp(selection, \"gi\"),\n            match => `<mark>${match}</mark>`\n          )\n        }}\n      />\n    ) : (\n      text\n    )}\n  </Typography>\n);\n\nconst menuHasSelection = (menu, depth, selection) => {\n  if (selection === \"\") {\n    return true;\n  }\n  const text = Object.keys(menu)[0];\n  if (depth > 1 && text.match(new RegExp(selection, \"gi\"))) {\n    return true;\n  }\n  const submenu = Object.values(menu)[0];\n  const mappings = submenu.map(item =>\n    menuHasSelection(item, depth + 1, selection)\n  );\n  return mappings.includes(true);\n};\n\nexport const MenuItem = ({ menu = {}, depth = 1, selection = \"\" }) => {\n  const [showDetails, show] = useState(false);\n  if (depth === 1 && !menuHasSelection(menu, depth, selection)) return null;\n  const text = Object.keys(menu)[0];\n  const submenu = Object.values(menu)[0];\n\n  const submenuHtml =\n    (showDetails || depth > 1) &&\n    submenu.map((subitem, index) => (\n      <MenuItem\n        key={\"sub-item-\" + index}\n        menu={subitem}\n        depth={depth + 1}\n        selection={selection}\n      />\n    ));\n  return (\n    <div\n      style={{\n        border: \"none thin gray\",\n        paddingLeft: depth * 20\n      }}\n      // key={\"menu-item-\" + index}\n      onClick={() => show(!showDetails)}\n    >\n      <Text text={text} depth={depth} selection={selection} />\n      {submenuHtml}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectMenu } from \"./counter/counterSlice\";\nimport { Typography, TextField } from \"@material-ui/core\";\nimport { MenuItem } from \"./menu_item\";\nexport const RestaurentMenu = () => {\n  const menu = useSelector(selectMenu);\n  const [keyword, setKeyword] = useState(\"\");\n\n  return (\n    <div>\n      <Typography variant=\"h2\">Restaurent Menu</Typography>\n      <TextField\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)}\n        label=\"Keyword\"\n        variant=\"outlined\"\n      />\n      {menu.map((item, index) => (\n        <MenuItem key={\"menu-item\" + index} menu={item} selection={keyword} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\r\nimport { Counter } from \"./features/counter/Counter\";\r\nimport { RestaurentMenu } from \"./features/restaurent_menu\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RestaurentMenu />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}