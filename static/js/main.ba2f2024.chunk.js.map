{"version":3,"sources":["features/actions/reducer.js","features/menu_item.js","features/menu_editor.js","features/restaurent_menu.js","App.js","serviceWorker.js","index.js"],"names":["initialState","menu","Bacon","Meat","Pork","Egg","Hamburger","Bread","Flour","Water","Cheese","Milk","Mushrooms","Sausages","reducer","state","action","oldMenu","newMenu","type","payload","push","selectedMenu","newIngredient","parts","split","forEach","element","index","Object","values","length","item","key","keys","Error","Text","text","depth","selection","Typography","variant","Math","min","dangerouslySetInnerHTML","__html","replace","RegExp","match","MenuItem","useState","showDetails","show","menuHasSelection","map","includes","submenu","submenuHtml","subitem","style","border","paddingLeft","onClick","MenuEditor","dispatch","flattenedMenu","flatMap","flattenMenu","menus","sub","setNewMenu","setSelectedMenu","setNewIngredient","margin","padding","AppBar","position","Toolbar","FormGroup","row","TextField","value","onChange","e","target","label","Button","Select","autoWidth","selected","RestaurentMenu","keyword","setKeyword","editable","toggleEditable","useReducer","marginBottom","FormControlLabel","control","Switch","checked","App","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba2f2024.chunk.js","sourcesContent":["const initialMenu = [\n  {\n    \"Bacon & eggs\": [\n      {\n        Bacon: [{ Meat: [{ Pork: [] }] }]\n      },\n      {\n        \"Ham Eggs\": [{ Egg: [] }]\n      }\n    ]\n  },\n  {\n    Hamburger: [\n      {\n        Meat: [{ Pork: [] }]\n      },\n      {\n        Bread: [{ Flour: [] }, { Water: [] }]\n      },\n      {\n        Cheese: [{ Milk: [] }]\n      }\n    ]\n  },\n  {\n    \"English breakfast\": [\n      {\n        \"Fried eggs\": [{ Egg: [] }]\n      },\n      {\n        Mushrooms: []\n      },\n      {\n        Sausages: [{ Meat: [{ Pork: [] }] }]\n      },\n      {\n        Bread: [{ Flour: [] }, { Water: [] }]\n      }\n    ]\n  }\n];\nexport const initialState = { menu: initialMenu };\n\nexport function reducer(state, action) {\n  const oldMenu = state.menu;\n  const newMenu = {};\n  switch (action.type) {\n    case \"addNewMenu\":\n      if (!action.payload) {\n        return state;\n      }\n      newMenu[action.payload] = [];\n      oldMenu.push(newMenu);\n      return { menu: oldMenu };\n    case \"addNewIngredient\":\n      const { selectedMenu, newIngredient } = action.payload;\n      if (!newIngredient) {\n        return state;\n      }\n\n      const parts = selectedMenu.split(\" -> \");\n      let menu = state.menu;\n\n      parts.forEach(element => {\n        for (let index = 0; index < Object.values(menu).length; index++) {\n          const item = Object.values(menu)[index];\n          const key = Object.keys(item)[0];\n          if (key === element) {\n            menu = item[key];\n            break;\n          }\n        }\n      });\n\n      newMenu[newIngredient] = [];\n      menu.push(newMenu);\n      return { menu: oldMenu };\n    default:\n      throw new Error();\n  }\n}\n","import React, { useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst Text = ({ text = \"provide text\", depth = 1, selection }) => (\n  <Typography variant={\"h\" + (Math.min(6,depth + 3))}>\n    {depth > 1 && \"â””\"}\n    {depth > 1 && selection ? (\n      <span\n        dangerouslySetInnerHTML={{\n          __html: text.replace(\n            new RegExp(selection, \"gi\"),\n            match => `<mark>${match}</mark>`\n          )\n        }}\n      />\n    ) : (\n      text\n    )}\n  </Typography>\n);\n\nconst menuHasSelection = (menu, depth, selection) => {\n  if (selection === \"\") {\n    return true;\n  }\n  const text = Object.keys(menu)[0];\n  if (depth > 1 && text.match(new RegExp(selection, \"gi\"))) {\n    return true;\n  }\n  const submenu = Object.values(menu)[0];\n  const mappings = submenu.map(item =>\n    menuHasSelection(item, depth + 1, selection)\n  );\n  return mappings.includes(true);\n};\n\nexport const MenuItem = ({ menu = {}, depth = 1, selection = \"\" }) => {\n  const [showDetails, show] = useState(false);\n  if (depth === 1 && !menuHasSelection(menu, depth, selection)) return null;\n  const text = Object.keys(menu)[0];\n  const submenu = Object.values(menu)[0];\n\n  const submenuHtml =\n    (showDetails || depth > 1) &&\n    submenu.map((subitem, index) => (\n      <MenuItem\n        key={\"sub-item-\" + index}\n        menu={subitem}\n        depth={depth + 1}\n        selection={selection}\n      />\n    ));\n  return (\n    <div\n      style={{\n        border: \"none thin gray\",\n        paddingLeft: depth * 20\n      }}\n      onClick={() => show(!showDetails)}\n    >\n      <Text text={text} depth={depth} selection={selection} />\n      {submenuHtml}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  FormGroup,\n  Typography,\n  TextField,\n  Select,\n  MenuItem,\n  Button\n} from \"@material-ui/core\";\n\nconst flattenMenu = menu => {\n  const text = Object.keys(menu)[0];\n  const menus = [text];\n\n  const submenu = Object.values(menu)[0];\n  if (submenu.length > 0) {\n    const subs = submenu.flatMap(item => flattenMenu(item));\n    subs.forEach(sub => {\n      menus.push(text + \" -> \" + sub);\n    });\n  }\n  return menus;\n};\n\nexport const MenuEditor = ({ menu, dispatch }) => {\n  const flattenedMenu = menu.flatMap(item => flattenMenu(item));\n\n  const [newMenu, setNewMenu] = useState(\"\");\n  const [selectedMenu, setSelectedMenu] = useState(flattenedMenu[0]);\n  const [newIngredient, setNewIngredient] = useState(\"\");\n\n  return (\n    <div style={{ margin: 50, border: \"thin solid\", padding: 10 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Adding items or ingredients to the Menu\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <FormGroup row style={{ padding: 20 }}>\n        <TextField\n          variant=\"outlined\"\n          value={newMenu}\n          onChange={e => setNewMenu(e.target.value)}\n          label=\"new menu item\"\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            dispatch({ type: \"addNewMenu\", payload: newMenu });\n            setNewMenu(\"\");\n          }}\n        >\n          Add new menu item\n        </Button>\n      </FormGroup>\n      <FormGroup row style={{ padding: 20 }}>\n        <Select\n          autoWidth\n          value={selectedMenu}\n          variant=\"outlined\"\n          onChange={e => setSelectedMenu(e.target.value)}\n        >\n          {flattenedMenu.map(menu => (\n            <MenuItem key={menu} selected value={menu}>\n              {menu}\n            </MenuItem>\n          ))}\n        </Select>\n        <TextField\n          variant=\"outlined\"\n          label=\"ingridient\"\n          value={newIngredient}\n          onChange={e => setNewIngredient(e.target.value)}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            dispatch({\n              type: \"addNewIngredient\",\n              payload: { newIngredient, selectedMenu }\n            });\n            setNewIngredient(\"\");\n          }}\n        >\n          Add ingridient to menu item\n        </Button>\n      </FormGroup>\n    </div>\n  );\n};\n","import React, { useState, useReducer } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  FormControlLabel,\n  Typography,\n  TextField,\n  Switch\n} from \"@material-ui/core\";\n\nimport { reducer, initialState } from \"./actions/reducer\";\nimport { MenuItem } from \"./menu_item\";\nimport { MenuEditor } from \"./menu_editor\";\n\nexport const RestaurentMenu = () => {\n  const [keyword, setKeyword] = useState(\"\");\n  const [editable, toggleEditable] = useState(false);\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const menu = state.menu;\n\n  return (\n    <div>\n      <AppBar position=\"static\" style={{ marginBottom: 10 }}>\n        <Toolbar>\n          <Typography variant=\"h3\">Restaurent Menu</Typography>\n        </Toolbar>\n      </AppBar>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={editable}\n            onChange={e => toggleEditable(!editable)}\n          />\n        }\n        label=\"Allow adding to Menu\"\n      />\n      <TextField\n        value={keyword}\n        onChange={e => setKeyword(e.target.value)}\n        label=\"Search for allergen\"\n        variant=\"outlined\"\n      />\n      <div style={{ margin: 15, border: \"thin solid navy\" }}>\n        <div style={{ margin: 5, padding: 10, border: \"thin solid navy\" }}>\n          {menu.map((item, index) => (\n            <MenuItem\n              key={\"menu-item\" + index}\n              menu={item}\n              selection={keyword}\n            />\n          ))}\n        </div>\n      </div>\n      {editable && <MenuEditor menu={menu} dispatch={dispatch} />}\n    </div>\n  );\n};\n","import React from \"react\";\r\nimport { RestaurentMenu } from \"./features/restaurent_menu\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RestaurentMenu />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}